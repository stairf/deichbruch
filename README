
About Deichbruch
================

Deichbruch is a library for fast, reliable, and portable integer overflow
detection in C. It chooses a suitable overflow-detection strategy based on
compile-time heuristics. The compiler optimizes each arithmetic operation
individually.


Basic Idea
----------

C provides no built-in mechanisms for overflow detection. However, multiple
workaround strategies exist to reliably detect integer overflow situations. In
order to be fast, Deichbruch chooses a suitable strategy for each operation.


Optimization
------------

Deichbruch targets compiler optimization for performance improvement. Do not
compile Deichbruch with optimizations disabled (or at least do not complain
about performance then). The following approaches help the compiler to improve
code performance:

 - If available, Deichbruch uses compiler built-in functions that provide
   efficient overflow detection.
 - All macro functions care about constant values, and therefore allow compiler
   optimizations like constant folding.
 - If possible, some simple heuristics decide which overflow strategy to use.
   This decision is entirely based on compile-time constants, so that no
   runtime check is required.
 - On success, each macro tells the compiler that the result is equivalent to
   the corresponding integer operation, as long as the compiler supports such
   an information. Thus, further optimization based on dataflow is possible.

Currently, Deichbruch implements the following overflow detection strategies:

 - precheck: Before performing the critical operation, test if the operand are
   in valid ranges. If necessary, the valid ranges are computed at runtime.
   However, Deichbruch tries to reduce runtime costs by pre-calculation at
   compile time, if possible.
 - largetype: Use a bigger data type for the critical operation, then check the
   result and cast it back to the original type.
 - partial: For unsigned multiplication, split the values into halves, multiply
   the parts and add them together.
 - lib: Use an open-source library, just for performance comparison
 - default: Use compile-time heuristics, based on benchmarking results, to
   choose a strategy that is likely to be fast.


Testing
-------

Deichbruch uses a type-generic testsuite to test each overflow detection
strategy for each type. You can find it in the 'tests/' folder.

To run the testsuite, run 'make check'.

The testsuite uses the GCC compiler flag '-ftrapv' that causes program abortion
on integer overflow. This flag ensures that no undefined behavior occurs in the
testsuite.


Benchmarking
------------

For each individual operation, Deichbruch tries to find one approach that is
good enough for this particular case. The default strategy examines the
operands to decide which strategy is likely to be fast.

The compile-time heuristics of the default strategy is based on benchmarking
results. You can find the benchmark source code in the 'benchmarks/' folder.

To run all benchmarks and plot the result, run 'make plot'. The result will be
visualized in the file 'plots/result.pdf'. This will take some time. Do not use
the '-j' option for make because parallel processing can influence performance
measurements.


