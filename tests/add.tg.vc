/*****
 * Copyright (c) 2015, Stefan Reif
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****/

#include "tgcommon.h"

#define add(x,y) check_add(P0(x),P1(y))
#define fail(x,y) fail_add(P0(x),P1(y))

int main(int argc, char **argv)
{
	add(0, 0);
	add(0, 1);
	add(1, 0);
	add(1, 2);
	add(2, 1);
	add(MAX, 0);
	add(0, MAX);
	add(MAX/2, MAX/2);
	add(MAX/2, 1);
	add(1, MAX/2);
	add(MAX-2, 1);
	add(1, MAX-2);
	add(MAX-2, 2);
	add(2, MAX-2);
	add(MAX-3, 2);
	add(2, MAX-3);
	add(MAX-3, 3);
	add(3, MAX-3);

	add(MIN, MAX);
	add(MAX, MIN);
	add(MIN, 0);
	add(0, MIN);

#ifdef SIGNED
	add(0, -1);
	add(-1, 0);
	add(0, -2);
	add(-2, 0);
	add(0, -12);
	add(-12, 0);
	add(1, -1);
	add(-1, 1);
	add(2, -2);
	add(-2, 2);
	add(3, -2);
	add(-2, 3);
	add(1, -123);
	add(-123, 1);
	add(12, -123);
	add(-123, 12);
	add(123, -123);
	add(-123, 123);
	add(-1, -1);
	add(-2, -1);
	add(-1, -2);
	add(-3, -1);
	add(-1, -3);
	add(MAX, -1);
	add(-1, MAX);
	add(MAX, -2);
	add(-2, MAX);
	add(MAX-1, -1);
	add(-1, MAX-1);
	add(MAX-2, -1);
	add(-1, MAX-2);
	add(MAX-2, -2);
	add(-2, MAX-2);
	add(MAX-2, -3);
	add(-3, MAX-2);
	add(MAX/2, -1);
	add(-1, MAX/2);
	add(MAX/2, -MAX/2);
	add(-MAX/2, MAX/2);
	add(MAX, -MAX/2);
	add(-MAX/2, MAX);
	add(MIN, 1);
	add(1, MIN);
	add(MIN+1, -1);
	add(-1, MIN+1);
	add(MIN+2, -1);
	add(-1, MIN+2);
	add(MIN+2, -2);
	add(-2, MIN+2);
	add(MIN/2, MIN/2+1);
	add(MIN/2+1, MIN/2);
	add(MAX, -MAX);
	add(-MAX, MAX);
	add(MAX-1, MIN);
	add(MIN, MAX-1);
	add(MAX, MIN+1);
	add(MIN+1, MAX);

	if (IS_2_COMPLEMENT) {
		add(-MAX, -1);
		add(-1, -MAX);
		fail(-MAX, -2);
		fail(-2, -MAX);
	}

#endif

	fail(MAX, 1);
	fail(1, MAX);
	fail(MAX-1, 2);
	fail(2, MAX-1);
	fail(MAX, 2);
	fail(2, MAX);
	fail(MAX, MAX);
	fail(MAX/2+2, MAX/2);
	fail(MAX/2, MAX/2+2);
	fail(MAX, MAX-1);
	fail(MAX-1, MAX);
	fail(MAX/2+1,MAX/2+1);

	if (MAX % 2) {
		add(MAX/2, MAX/2+1);
		add(MAX/2+1, MAX/2);
	}

#ifdef SIGNED
	fail(MIN, MIN);
	fail(MIN, -1);
	fail(-1, MIN);
	fail(MIN+1, -2);
	fail(-2, MIN+1);
	fail(MIN+MAX-1, -MAX);
	fail(-MAX, MIN+MAX-1);
	fail(MIN/2, MIN/2-2);
	fail(MIN/2-2, MIN/2);
	fail(MIN/2-1, MIN/2-1);
	fail(MIN, -2);
	fail(-2, MIN);
#endif

	return 0;
}

